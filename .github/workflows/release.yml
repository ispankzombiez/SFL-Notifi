name: Build and Publish Signed APK

on:
  release:
    types:
      - published

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      - name: Decode keystore
        run: echo "${{ secrets.KEYSTORE }}" | base64 --decode > keystore.jks

      - name: Make Gradle executable
        run: chmod +x ./gradlew

      - name: Build Signed Release APK
        run: ./gradlew assembleRelease -Pandroid.injected.signing.store.file=keystore.jks -Pandroid.injected.signing.store.password=${{ secrets.KEYSTORE_PASS }} -Pandroid.injected.signing.key.password=${{ secrets.KEY_PASS }}

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=$(echo ${{ github.event.release.tag_name }} | cut -d'-' -f1)" >> $GITHUB_OUTPUT

      - name: Copy and rename APK
        run: |
          mkdir -p releases
          cp app/release/SFL-Notifi.apk releases/SFL-Notifi-${{ steps.get_version.outputs.VERSION }}.apk

      - name: Commit and push APK
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add releases/SFL-Notifi-${{ steps.get_version.outputs.VERSION }}.apk
          git commit -m "Add APK for version ${{ steps.get_version.outputs.VERSION }}"
          git push

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env: 
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: releases/SFL-Notifi-${{ steps.get_version.outputs.VERSION }}.apk
          asset_name: SFL-Notifi-${{ steps.get_version.outputs.VERSION }}.apk
          asset_content_type: application/vnd.android.package-archive
